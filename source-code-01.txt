# File location: 5G_Emulator_API/main.py
# File location: 5G_Emulator_API/main.py
import subprocess

def start_nf(file_path):
    subprocess.Popen(["python", file_path])

if __name__ == "__main__":
    # Start NRF
    start_nf("core_network/nrf.py")

    # Start Network Functions
    start_nf("core_network/amf.py")
    start_nf("core_network/smf.py")
    start_nf("core_network/upf.py")
    start_nf("core_network/ausf.py")
    start_nf("core_network/udm.py")
    start_nf("core_network/udr.py")
    start_nf("core_network/udsf.py")
    
    # Start CU and DU
    start_nf("ran/cu/cu.py")
    start_nf("ran/du/du.py")

    # Start RRU
    start_nf("ran/rru/rru.py")

    # Start PTP
    start_nf("ptp/ptp.py")


# File location: 5G_Emulator_API/test_cu_du.py
# File location: 5G_Emulator_API/test_cu_du.py
import requests

cu_url = "http://127.0.0.1:9008"
du_url = "http://127.0.0.1:9007"

# Simulate CU sending data to DU
def cu_to_du():
    data = {"message": "Data from CU to DU"}
    response = requests.post(f"{cu_url}/cu_to_du", json=data)
    print(response.json())

# Simulate DU sending data to CU
def du_to_cu():
    data = {"message": "Data from DU to CU"}
    response = requests.post(f"{du_url}/du_service", json=data)
    print(response.json())

if __name__ == "__main__":
    cu_to_du()
    du_to_cu()


# File location: 5G_Emulator_API/core_network/amf.py
# File location: 5G_Emulator_API/core_network/amf.py
from fastapi import FastAPI
import uvicorn
import requests

app = FastAPI()
nrf_url = "http://127.0.0.1:8000"

@app.on_event("startup")
def register_with_nrf():
    nf_registration = {
        "nf_type": "AMF",
        "ip": "127.0.0.1",
        "port": 9000
    }
    requests.post(f"{nrf_url}/register", json=nf_registration)

@app.get("/amf_service")
def amf_service():
    return {"message": "AMF service response"}

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=9000)


# File location: 5G_Emulator_API/core_network/smf.py
# File location: 5G_Emulator_API/core_network/smf.py
from fastapi import FastAPI
import uvicorn
import requests

app = FastAPI()
nrf_url = "http://127.0.0.1:8000"

@app.on_event("startup")
def register_with_nrf():
    nf_registration = {
        "nf_type": "SMF",
        "ip": "127.0.0.1",
        "port": 9001
    }
    requests.post(f"{nrf_url}/register", json=nf_registration)

@app.get("/smf_service")
def smf_service():
    return {"message": "SMF service response"}

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=9001)


# File location: 5G_Emulator_API/core_network/upf.py
# File location: 5G_Emulator_API/core_network/upf.py
from fastapi import FastAPI
import uvicorn
import requests

app = FastAPI()
nrf_url = "http://127.0.0.1:8000"

@app.on_event("startup")
def register_with_nrf():
    nf_registration = {
        "nf_type": "UPF",
        "ip": "127.0.0.1",
        "port": 9002
    }
    requests.post(f"{nrf_url}/register", json=nf_registration)

@app.get("/upf_service")
def upf_service():
    return {"message": "UPF service response"}

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=9002)


# File location: 5G_Emulator_API/core_network/udm.py
# File location: 5G_Emulator_API/core_network/udm.py
from fastapi import FastAPI
import uvicorn
import requests

app = FastAPI()
nrf_url = "http://127.0.0.1:8000"

@app.on_event("startup")
def register_with_nrf():
    nf_registration = {
        "nf_type": "UDM",
        "ip": "127.0.0.1",
        "port": 9004
    }
    requests.post(f"{nrf_url}/register", json=nf_registration)

@app.get("/udm_service")
def udm_service():
    return {"message": "UDM service response"}

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=9004)


# File location: 5G_Emulator_API/core_network/nrf.py
# File location: 5G_Emulator_API/core_network/nrf.py
from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn

app = FastAPI()

class NFRegistration(BaseModel):
    nf_type: str
    ip: str
    port: int

nfs = {}

@app.post("/register")
def register_nf(nf: NFRegistration):
    nfs[nf.nf_type] = {"ip": nf.ip, "port": nf.port}
    return {"message": f"{nf.nf_type} registered successfully"}

@app.get("/discover/{nf_type}")
def discover_nf(nf_type: str):
    if nf_type in nfs:
        return nfs[nf_type]
    else:
        return {"message": f"{nf_type} not found"}

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)


# File location: 5G_Emulator_API/core_network/ausf.py
# File location: 5G_Emulator_API/core_network/ausf.py
from fastapi import FastAPI
import uvicorn
import requests

app = FastAPI()
nrf_url = "http://127.0.0.1:8000"

@app.on_event("startup")
def register_with_nrf():
    nf_registration = {
        "nf_type": "AUSF",
        "ip": "127.0.0.1",
        "port": 9003
    }
    requests.post(f"{nrf_url}/register", json=nf_registration)

@app.get("/ausf_service")
def ausf_service():
    return {"message": "AUSF service response"}

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=9003)


# File location: 5G_Emulator_API/core_network/main.py
# File location: 5G_Emulator_API/core_network/main.py
import subprocess

def start_nf(file_path):
    subprocess.Popen(["python", file_path])

if __name__ == "__main__":
    # Start NRF
    start_nf("core_network/nrf.py")

    # Start Network Functions
    start_nf("core_network/amf.py")
    start_nf("core_network/smf.py")
    start_nf("core_network/upf.py")
    start_nf("core_network/ausf.py")
    start_nf("core_network/udm.py")
    
    # Start gNodeB
    start_nf("ran/gnb.py")


# File location: 5G_Emulator_API/core_network/udr.py
# File location: 5G_Emulator_API/core_network/udr.py
from fastapi import FastAPI
from pydantic import BaseModel
import sqlite3
import uvicorn

app = FastAPI()

class UserData(BaseModel):
    imsi: str
    key: str

def init_db():
    conn = sqlite3.connect('udr.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            imsi TEXT PRIMARY KEY,
            key TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

@app.post("/register_user")
def register_user(user: UserData):
    conn = sqlite3.connect('udr.db')
    c = conn.cursor()
    c.execute('INSERT INTO users (imsi, key) VALUES (?, ?)', (user.imsi, user.key))
    conn.commit()
    conn.close()
    return {"message": "User registered successfully"}

@app.get("/get_user/{imsi}")
def get_user(imsi: str):
    conn = sqlite3.connect('udr.db')
    c = conn.cursor()
    c.execute('SELECT key FROM users WHERE imsi = ?', (imsi,))
    user = c.fetchone()
    conn.close()
    if user:
        return {"imsi": imsi, "key": user[0]}
    else:
        return {"message": "User not found"}

if __name__ == "__main__":
    init_db()
    uvicorn.run(app, host="127.0.0.1", port=9005)


# File location: 5G_Emulator_API/core_network/udsf.py
# File location: 5G_Emulator_API/core_network/udsf.py
from fastapi import FastAPI
from pydantic import BaseModel
import sqlite3
import uvicorn

app = FastAPI()

class UnstructuredData(BaseModel):
    id: str
    data: str

def init_db():
    conn = sqlite3.connect('udsf.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS unstructured_data (
            id TEXT PRIMARY KEY,
            data TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

@app.post("/store_data")
def store_data(data: UnstructuredData):
    conn = sqlite3.connect('udsf.db')
    c = conn.cursor()
    c.execute('INSERT INTO unstructured_data (id, data) VALUES (?, ?)', (data.id, data.data))
    conn.commit()
    conn.close()
    return {"message": "Data stored successfully"}

@app.get("/get_data/{id}")
def get_data(id: str):
    conn = sqlite3.connect('udsf.db')
    c = conn.cursor()
    c.execute('SELECT data FROM unstructured_data WHERE id = ?', (id,))
    data = c.fetchone()
    conn.close()
    if data:
        return {"id": id, "data": data[0]}
    else:
        return {"message": "Data not found"}

if __name__ == "__main__":
    init_db()
    uvicorn.run(app, host="127.0.0.1", port=9006)


# File location: 5G_Emulator_API/core_network/test.py
# File location: 5G_Emulator_API/core_network/test.py
import requests

nrf_url = "http://127.0.0.1:8000"
udr_url = "http://127.0.0.1:9005"
ausf_url = "http://127.0.0.1:9003"

# Register Network Functions with NRF
def register_nfs():
    nfs = [
        {"nf_type": "AMF", "ip": "127.0.0.1", "port": 9000},
        {"nf_type": "SMF", "ip": "127.0.0.1", "port": 9001},
        {"nf_type": "UPF", "ip": "127.0.0.1", "port": 9002},
        {"nf_type": "AUSF", "ip": "127.0.0.1", "port": 9003},
        {"nf_type": "UDM", "ip": "127.0.0.1", "port": 9004},
        {"nf_type": "UDR", "ip": "127.0.0.1", "port": 9005},
        {"nf_type": "UDSF", "ip": "127.0.0.1", "port": 9006},
        {"nf_type": "gNodeB", "ip": "127.0.0.1", "port": 38412},
    ]

    for nf in nfs:
        response = requests.post(f"{nrf_url}/register", json=nf)
        print(response.json())

# Register a user with UDR
def register_user():
    user_data = {"imsi": "123456789012345", "key": "secret_key"}
    response = requests.post(f"{udr_url}/register_user", json=user_data)
    print(response.json())

# Simulate AUSF authentication request
def authenticate_user():
    imsi = "123456789012345"
    response = requests.get(f"{udr_url}/get_user/{imsi}")
    if response.status_code == 200:
        user_data = response.json()
        print(f"AUSF authenticated user: {user_data}")
    else:
        print(f"AUSF failed to authenticate user: {response.json()}")

if __name__ == "__main__":
    register_nfs()
    register_user()
    authenticate_user()


# File location: 5G_Emulator_API/ran/gnb.py
# File location: 5G_Emulator_API/ran/gnb.py
from fastapi import FastAPI
import uvicorn
import requests

app = FastAPI()
nrf_url = "http://127.0.0.1:8000"

@app.on_event("startup")
def register_with_nrf():
    nf_registration = {
        "nf_type": "gNodeB",
        "ip": "127.0.0.1",
        "port": 38412
    }
    requests.post(f"{nrf_url}/register", json=nf_registration)

@app.get("/gnb_service")
def gnb_service():
    return {"message": "gNodeB service response"}

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=38412)


# File location: 5G_Emulator_API/ran/cu/cu.py
# File location: 5G_Emulator_API/ran/cu/cu.py
from fastapi import FastAPI
import uvicorn
import requests

app = FastAPI()
du_url = "http://127.0.0.1:9007"
nrf_url = "http://127.0.0.1:8000"

@app.on_event("startup")
def register_with_nrf():
    nf_registration = {
        "nf_type": "CU",
        "ip": "127.0.0.1",
        "port": 9008
    }
    requests.post(f"{nrf_url}/register", json=nf_registration)

@app.post("/cu_to_du")
def cu_to_du(data: dict):
    response = requests.post(f"{du_url}/du_service", json=data)
    return response.json()

@app.get("/cu_service")
def cu_service():
    return {"message": "CU service response"}

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=9008)


# File location: 5G_Emulator_API/ran/cu/rrc.py
# File location: 5G_Emulator_API/ran/cu/rrc.py
def handle_rrc_message(message):
    print(f"RRC Message: {message}")
    # Add detailed RRC processing here


# File location: 5G_Emulator_API/ran/cu/pdcp.py
# File location: 5G_Emulator_API/ran/cu/pdcp.py
def handle_pdcp_message(message):
    print(f"PDCP Message: {message}")
    # Add detailed PDCP processing here


# File location: 5G_Emulator_API/ran/cu/sdap.py
# File location: 5G_Emulator_API/ran/cu/sdap.py
def handle_sdap_message(message):
    print(f"SDAP Message: {message}")
    # Add detailed SDAP processing here


# File location: 5G_Emulator_API/ran/du/du.py
# File location: 5G_Emulator_API/ran/du/du.py
from fastapi import FastAPI
import uvicorn
import requests

app = FastAPI()
cu_url = "http://127.0.0.1:9008"
nrf_url = "http://127.0.0.1:8000"

@app.on_event("startup")
def register_with_nrf():
    nf_registration = {
        "nf_type": "DU",
        "ip": "127.0.0.1",
        "port": 9007
    }
    requests.post(f"{nrf_url}/register", json=nf_registration)

@app.post("/du_service")
def du_service(data: dict):
    print(f"Received data at DU: {data}")
    return {"message": "DU received data"}

@app.get("/du_to_cu")
def du_to_cu(data: dict):
    response = requests.post(f"{cu_url}/cu_service", json=data)
    return response.json()

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=9007)


# File location: 5G_Emulator_API/ran/du/rlc.py
# File location: 5G_Emulator_API/ran/du/rlc.py
def handle_rlc_message(message):
    print(f"RLC Message: {message}")
    # Add detailed RLC processing here


# File location: 5G_Emulator_API/ran/du/mac.py
# File location: 5G_Emulator_API/ran/du/mac.py
def handle_mac_message(message):
    print(f"MAC Message: {message}")
    # Add detailed MAC processing here


# File location: 5G_Emulator_API/ran/du/phy.py
# File location: 5G_Emulator_API/ran/du/phy.py
def handle_phy_message(message):
    print(f"PHY Message: {message}")
    # Add detailed PHY processing here


# File location: 5G_Emulator_API/ran/rru/rru.py
# File location: 5G_Emulator_API/ran/rru/rru.py
def transmit_data(data):
    print(f"Transmitting data: {data}")
    # Simulate data transmission over radio


# File location: 5G_Emulator_API/ptp/ptp.py
# File location: 5G_Emulator_API/ptp/ptp.py
def synchronize_clock():
    print("Synchronizing clock using PTP")
    # Add PTP synchronization logic here


